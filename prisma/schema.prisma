generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  Order                 Order[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Product {
  id                   String      @id @default(auto()) @map("_id") @db.ObjectId
  slug                 String      @unique
  title                String
  description          String
  category             String
  price                Float
  discountPercentage   Float
  rating               Float
  stock                Int
  tags                 String[]
  brand                String
  sku                  String
  weight               Float?
  width                Float?
  height               Float?
  depth                Float?
  warrantyInformation  String?
  shippingInformation  String?
  reviews              Review[]
  returnPolicy         String?
  minimumOrderQuantity Int
  images               String[]
  thumbnail            String
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  OrderItem            OrderItem[]
}

model Review {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  rating        Int
  comment       String
  date          DateTime
  reviewerName  String
  reviewerEmail String
  Product       Product? @relation(fields: [productId], references: [id])
  productId     String?  @db.ObjectId
}

model Order {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  userId        String         @db.ObjectId
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemsPrice    Float          @default(0.0)
  shippingPrice Float          @default(0.0)
  taxPrice      Float          @default(0.0)
  totalPrice    Float          @default(0.0)
  fullName      String
  address       String
  city          String
  region        String
  postalCode    String
  paymentMethod String
  paymentResult PaymentResult?
  isPaid        Boolean        @default(false)
  paidAt        DateTime?
  isDelivered   Boolean        @default(false)
  deliveredAt   DateTime?
  orderItems    OrderItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([userId])
  @@index([isPaid, isDelivered])
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int     @default(1)
  price     Float   @default(0.0)

  @@index([orderId])
}

model PaymentResult {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId      String   @unique @db.ObjectId
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  paymentId    String
  status       String
  emailAddress String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
